day95
内容回顾：
	序列化
		-- GET 请求
			-- 声明一个序列化器
				-- 声明所有想要序列化的字段
			-- 视图
				-- ser_obj = BookSerializer(queryset, many=True)
				-- return Response(ser_obj.data)
		-- POST请求
			-- 声明序列化器
			-- 注意正序和反序字段不统一的情况
				-- read_only
				-- write_only 
				-- required = False
				-- 重写create方法
			-- 视图
				-- ser_obj = BookSerializer(data=request.data)
				-- if ser_obj.is_valid():
					  ser_obj.save()
					  return Response(ser_obj.data)
				   return Response(ser_obj.errors)
		-- PUT/PATCH请求
			-- 声明序列化器
				-- 重写update方法
			-- 视图
				-- ser_obj = BookSerializer(instance, data=request.data, partial=True)
				-- if ser_obj.is_valid():
					  ser_obj.save()
					  return Response(ser_obj.data)
				   return Response(ser_obj.errors)
		-- ModelSerializer
			-- 配置
				class Meta:
					model = 表名
					fields = "__all__"/ []
					# exclude = []
					depth = 1 # 外键关系找几层 把外键关系都变成read_only=True
					extra_kwargs = {字段名称：{增加的属性}}
			-- SerializerMethodField 方法字段
				def get_字段名称(self, obj):
					obj 是我们序列化的时候传过来的每个模型对象
					return 我想要数据的结构
	视图
		-- 第一次封装
			class GenericAPIView(APIView):
				queryset = None
				serializer_class = None
				
				def get_queryset(self):
					return self.queryset.all()
				
				def get_serliazer(self, *args, **kwargs):
					return self.serializer_class(*args, **kwargs)
			class ListModelMixin(object):
				def list(self, request):
					写原来get请求序列化的逻辑
					
			class BookView(GenericAPIView, ListModelMixin):
				queryset = Book.objects.all()
				serializer_class = BookSerializer
				
				def get(self, request):
					return self.list(request)
		-- 第二次封装
			-- 什么都没干 就是方便继承去了~~~
		-- 第三次封装
			-- ViewSetMixin  重写了as_view方法
			-- class ModelViewSet(ViewSetMixin, GenericAPIView, ListModelMixin):
					queryset = Book.objects.all()
					serializer_class = BookSerializer
				
	路由
		-- BookView.as_view({"get": "list", "post": "create"})
		-- from rest_framework.routers import DefaultRouter
		-- router = DefaultRouter()
		-- router.register(路由， 视图)
		-- 生成的路由在 router.urls里
	版本
	认证
		-- raise AuthenticationFailed(自定义的异常信息)
	权限
	频率
今日内容：
	分页 DRF提供三种分页方式
		-- ///////?page=1&size=5
		-- ///////?limit=2&offset=3
		-- ///////?加密的游标 只有上一页下一下
		
	解析器
		-- Content-Type 我给你的是什么数据类型
			-- application/x-www-form-urlencoded 表单数据
			-- multipart/form-data  文件的
			-- application/json
				-- request.body
		-- Accept  我能解析的是什么数据类型
		-- Django的解析器
			request.POST Form表单的数据
			request.FILES  文件的数据
		-- DRF解析器
			-- 拿前端传过来的Content-Type 跟我自己所有的解析器进行匹配
			-- 匹配上了返回这个解析器
			-- 并且调用这个解析器的parse方法 进行解析数据
		-- DRF默认配置的解析器
		
	渲染器
		'DEFAULT_RENDERER_CLASSES': (
			'rest_framework.renderers.JSONRenderer',
			'rest_framework.renderers.BrowsableAPIRenderer',
        ),
明天：
	跨域
	ContentType组件 django的
	表结构
	小接口
	
	
	
	
	
	
	
	
	
	
	
	
	
	