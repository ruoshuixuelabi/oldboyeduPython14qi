课程回顾：
    编程语言的发展：
        机器语言 ： 二进制
        汇编语言 ： 指令，命令形式的
        高级语言 :  面向过程（C） 面对对象（python）
    操作系统的目标：
        为了用户更方便的使用
    并行：指两件或多件事情，在同一时间点同时执行
    并发：指两件或多件事情，在同一时间间隔内同时执行
    计算机组成：
        CPU，主板，存储，输入，输出

    进程由三部分组成：
        代码段，数据段，PCB（进程控制块）
    进程的三个基本状态：
        就绪状态：获得了除CPU之外运行需要的所有资源
        执行状态：获得了所有资源，处于正在执行的状态
        阻塞状态：因为各种原因，导致进程放弃了cpu，导致进程无法继续执行，此时进程处于内存

    dos系统：      单用户单任务
    windows系统：  单用户多任务（早期的windows）
    unix系统：     多用户多任务

    为什么要有操作系统？
       1 封装了所有硬件的接口，使用户更方便的使用
       2 对于计算机内所有资源，进行一个合理的调度和分配


    多进程的模块：
       multiprocessing
       Process

今天的任务：
    1 如何开启多进程及多进程相关常用方法
      并行：
      并发：
        早期单核cpu时候，没有并行的概念，只有并发（微观上串行，宏观上并行）
      同步
      异步
      阻塞
      非阻塞

      from multiprocessing import Process

      获取当前进程的pid号，os.getpid()
      获取当前进程的父进程的pid号，os.getppid()

      开启子进程的方式：
         1 p = Process(target=func,args=(,))
           target: 是子进程要执行的任务
           args：是父进程给子进程传递的参数
         2 自定义类，去继承Process

      进程的方法：
          p.start()开启子进程，底层调用的是p.run()


今日总结：
    1 名词解释
    并行
    并发
    同步
    异步
    阻塞
    非阻塞

    2 进程的两种开启方法
      (1) p = Process(target=None,args(,))
      (2) 自定义类，继承Process父类

    3 进程的常用方法
      （1） start()  开启一个子进程
      （2） join()   异步变同步（就是让父进程停留在join这句话，等待子进程执行结束，父进程再继续执行）
      （3） is_alive() 判断进程是否活着
      （4） terminate()   杀死进程
    4 进程的常用属性
       （1） p.name =    给p进程一个名字
       （2） p.pid       返回p进程的pid
       （3） p.daemon = True   将p进程设置为守护进程。（True为守护进程，False为普通进程）
           守护进程的两个特点：
              守护进程会随着父进程的结束而结束
              守护进程不能再创建子进程（不能要孩子）


    2 多进程编程，数据不安全的问题
作业：
    把课上代码敲一遍，带着注释，多加注释，加自己的理解注释
    整理博客
    把今日的理论消化一下

    预习 多进程之间的锁机制，信号机制，事件机制


    3 进程间通信（IPC）


















